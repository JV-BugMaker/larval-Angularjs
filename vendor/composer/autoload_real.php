<?php

// autoload_real.php @generated by Composer

class ComposerAutoloaderInit0dec90b7ebd756a5a96c886ebc5110ea
{
    private static $loader;

    public static function loadClassLoader($class)
    {
        if ('Composer\Autoload\ClassLoader' === $class) {
            //返回类加载文件路径
            require __DIR__ . '/ClassLoader.php';
        }
    }
    //对外提供自动加载函数接口
    public static function getLoader()
    {
        //不重复实例化类对象
        if (null !== self::$loader) {
            return self::$loader;
        }
        //使用标准进行对类的自动加载 此类中的loadClassLoader函数处理自动加载类
        spl_autoload_register(array('ComposerAutoloaderInit0dec90b7ebd756a5a96c886ebc5110ea', 'loadClassLoader'), true, true);
        //将类自动加载函数注册完 并赋值给loader处理句柄之后 取消注册 释放资源
        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
        //释放资源
        spl_autoload_unregister(array('ComposerAutoloaderInit0dec90b7ebd756a5a96c886ebc5110ea', 'loadClassLoader'));
        //判断PHP版本 以及 没使用了HHVM虚拟机
        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION');
        if ($useStaticLoader) {
            //静态自动加载文件
            require_once __DIR__ . '/autoload_static.php';
            //该函数允许用户调用直接写的函数并传入一定的参数，下面总结下这个函数的使用方法。
            call_user_func(\Composer\Autoload\ComposerStaticInit0dec90b7ebd756a5a96c886ebc5110ea::getInitializer($loader));
        } else {
            //处理命名空间的自动加载
            $map = require __DIR__ . '/autoload_namespaces.php';
            foreach ($map as $namespace => $path) {
                //将命名空间与文件的映射关系进行对应处理
                $loader->set($namespace, $path);
            }
            //在这边处理了自动加载的psr4规则的映射关系对应
            $map = require __DIR__ . '/autoload_psr4.php';
            foreach ($map as $namespace => $path) {
                $loader->setPsr4($namespace, $path);
            }
            //类映射处理
            $classMap = require __DIR__ . '/autoload_classmap.php';
            if ($classMap) {
                $loader->addClassMap($classMap);
            }
        }

        $loader->register(true);

        if ($useStaticLoader) {
            $includeFiles = Composer\Autoload\ComposerStaticInit0dec90b7ebd756a5a96c886ebc5110ea::$files;
        } else {
            $includeFiles = require __DIR__ . '/autoload_files.php';
        }
        foreach ($includeFiles as $fileIdentifier => $file) {
            composerRequire0dec90b7ebd756a5a96c886ebc5110ea($fileIdentifier, $file);
        }

        return $loader;
    }
}

function composerRequire0dec90b7ebd756a5a96c886ebc5110ea($fileIdentifier, $file)
{
    if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
        require $file;

        $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;
    }
}
